"""
Module: `a + b sqrt(c)` object
"""

from __future__ import annotations

from fractions import Fraction
from functools import cached_property
from typing import Union, overload

class ABSqrtC:
    @overload
    def __init__(self, add: Union[Fraction, int], radical: int, /) -> None: ...
    @overload
    def __init__(
        self, add: Union[Fraction, int], factor: Union[Fraction, int], radical: int, /
    ) -> None: ...
    @property
    def add(self) -> _AddFraction: ...
    @property
    def factor(self) -> _FactorFraction: ...
    @property
    def radical(self) -> int: ...
    @property
    def value(self) -> float: ...
    @cached_property
    def conjugate(self) -> ABSqrtC: ...
    @cached_property
    def conjugate_product(self) -> Fraction: ...
    @cached_property
    def inverse(self) -> ABSqrtC: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: ABSqrtC) -> bool: ...
    def __ne__(self, other: ABSqrtC) -> bool: ...
    def __lt__(self, other: ABSqrtC) -> bool: ...
    def __le__(self, other: ABSqrtC) -> bool: ...
    def __gt__(self, other: ABSqrtC) -> bool: ...
    def __ge__(self, other: ABSqrtC) -> bool: ...
    def __hash__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __add__(self, other: Union[ABSqrtC, Fraction, int]) -> ABSqrtC: ...
    def __sub__(self, other: Union[ABSqrtC, Fraction, int]) -> ABSqrtC: ...
    def __mul__(self, other: Union[ABSqrtC, Fraction, int]) -> ABSqrtC: ...
    def __truediv__(self, other: Union[ABSqrtC, Fraction, int]) -> ABSqrtC: ...
    def __radd__(self, other: Union[Fraction, int]) -> ABSqrtC: ...
    def __rsub__(self, other: Union[Fraction, int]) -> ABSqrtC: ...
    def __rmul__(self, other: Union[Fraction, int]) -> ABSqrtC: ...
    def __rtruediv__(self, other: Union[Fraction, int]) -> ABSqrtC: ...
    def __pow__(self, power: int) -> ABSqrtC: ...
    def __pos__(self) -> ABSqrtC: ...
    def __neg__(self) -> ABSqrtC: ...
    def __abs__(self) -> ABSqrtC: ...
    def __invert__(self) -> ABSqrtC: ...
    def __complex__(self) -> complex: ...
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
    @overload
    def __round__(self) -> int: ...
    @overload
    def __round__(self, ndigits: None) -> int: ...
    @overload
    def __round__(self, ndigits: int) -> float: ...
    def __trunc__(self) -> int: ...
    def __floor__(self) -> int: ...
    def __ceil__(self) -> int: ...
    def _get_common_radical(self, other: ABSqrtC) -> int: ...
    def _mul_add(
        self, other_add: _AddFraction, other_factor: _FactorFraction, radical: int
    ) -> _AddFraction: ...
    def _mul_factor(
        self, other_add: _AddFraction, other_factor: _FactorFraction
    ) -> _FactorFraction: ...
    @staticmethod
    def _parse_args(
        *args: Union[Fraction, int]
    ) -> tuple[Union[Fraction, int], Union[Fraction, int], int]: ...

class _AddFraction(Fraction): ...
class _FactorFraction(Fraction): ...

def _get_square_factors(n: int) -> tuple[int, int]: ...
