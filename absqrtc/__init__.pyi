from __future__ import annotations

from fractions import Fraction
from functools import total_ordering
from typing import overload
@total_ordering
class ABSqrtC:
    def __init__(self, a: Fraction, b: Fraction, c: int) -> None: ...
    @property
    def add(self) -> _AddFraction: ...
    @property
    def factor(self) -> _FactorFraction: ...
    @property
    def radical(self) -> int: ...
    @property
    def value(self) -> float: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: ABSqrtC) -> bool: ...
    def __lt__(self, other: ABSqrtC) -> bool: ...
    def __hash__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __add__(self, other: ABSqrtC) -> ABSqrtC: ...
    def __sub__(self, other: ABSqrtC) -> ABSqrtC: ...
    def __mul__(self, other: ABSqrtC) -> ABSqrtC: ...
    def __truediv__(self, other: ABSqrtC) -> ABSqrtC: ...
    def __pow__(self, power: int) -> ABSqrtC: ...
    def __neg__(self) -> ABSqrtC: ...
    def __abs__(self) -> ABSqrtC: ...
    def __invert__(self) -> ABSqrtC: ...
    def __complex__(self) -> complex: ...
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
    @overload
    def __round__(self) -> int: ...
    @overload
    def __round__(self, ndigits: None) -> int: ...
    @overload
    def __round__(self, ndigits: int) -> float: ...
    def __trunc__(self) -> int: ...
    def __floor__(self) -> int: ...
    def __ceil__(self) -> int: ...
    def conjugate(self) -> ABSqrtC: ...
    def _get_common_radical(self, other: ABSqrtC) -> int: ...
    def _mul_add(
        self, other_add: _AddFraction, other_factor: _FactorFraction, radical: int
    ) -> _AddFraction: ...
    def _mul_factor(
        self, other_add: _AddFraction, other_factor: _FactorFraction
    ) -> _FactorFraction: ...

class _BeauFraction(Fraction):
    def __str__(self) -> str: ...

class _AddFraction(_BeauFraction): ...

class _FactorFraction(_BeauFraction):
    def __neg__(self) -> _FactorFraction: ...

def _get_square_factors(n: int) -> tuple[int, int]: ...
